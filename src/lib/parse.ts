import { SpotifyResponse } from "@/types/Spotify";

/**
 * Parses the list of song names and makes Spotify API requests to retrieve song information.
 * @param song_list - The list of song names generated by the GPT model.
 * @returns A Promise that resolves to an array of SpotifyResponse containing song information.
 */
const parseSong = async (song_list: string): Promise<SpotifyResponse[]> => {
  const allSongs: SpotifyResponse[] = [];
  const songs: string[] = song_list.split("\n").slice(0, 6);

  const requests = songs.map(async (song) => {
    const songName = song.split("-")[0]?.trim();
    const artistName = song.split("-")[1]?.trim();

    const query = `${songName as string} ${artistName as string}`.replace(/[^a-zA-Z ]/g, "").replace(/ /g, "%20");

    try {
      const response = await fetch("/api/song/", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          query: query,
        }),
      });

      if (response.ok) {
        const data = await response.json() as SpotifyResponse;
        return data;
      }
    } catch (error) {
      console.error("Error:", error);
    }

    return {} as SpotifyResponse;
  });

  const results = await Promise.allSettled(requests);

  results
    .filter((result) => result.status === "fulfilled")
    .forEach((result) => {
      if (result.status === "fulfilled") {
        allSongs.push(result.value);
      }
  });


  const returnSongs = allSongs.filter((song) => song.tracks.items[0]?.name.toLowerCase() !== "undefined").slice(0, 6);

  if (returnSongs.length === 0 || returnSongs[0]?.tracks.items.length === 0) {
    return [];
  }

  return returnSongs;
};

export { parseSong };
